"""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë           rasa/server.py                   ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    
    FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Rasa NLU
    
    –û–ø–∏—Å–∞–Ω–∏–µ:
        –°–µ—Ä–≤–µ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç REST API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Rasa NLU. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.
"""

import uvicorn
import logging

from pydantic        import BaseModel, Field
from typing          import Dict, Optional
from contextlib      import asynccontextmanager
from fastapi         import FastAPI, HTTPException
from pathlib         import Path
from rasa.core.agent import Agent



MODEL_PATH = Path("nlu/models")

logging.basicConfig(
    level  = getattr(logging, "INFO"),
    format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)
agent: Optional[Agent] = None


# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class QueryRequest(BaseModel):
    """
        –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
    """
    text: str = Field(
        ...,
        min_length  = 1,
        max_length  = 1000,
        description = "–¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
    )

class QueryResponse(BaseModel):
    """
        –ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    query:  str = Field(..., description="–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞")
    intent: str = Field(..., description="–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ")
    entities: Dict[str, str] = Field(
        default_factory=dict,
        description="–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏"
    )
    confidence: float = Field(..., description="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è")


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    global agent
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Rasa NLU")
    
    if not MODEL_PATH.exists():
        logger.warning(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {MODEL_PATH}")
        MODEL_PATH.mkdir(parents=True, exist_ok=True)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {MODEL_PATH}")

    try:
        agent = Agent.load(str(MODEL_PATH))
        logger.info("‚úÖ NLU –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å: {e}")
    yield
    logger.info("üõë –í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ Rasa NLU")


app = FastAPI(
    title       = "Rasa NLU Server",
    description = "API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Rasa NLU",
    version     = "1.0.0",
    lifespan    = lifespan
)


@app.get("/health")
async def health_check():
    """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    """
    return {
        "status": "healthy",
        "model_loaded": agent is not None
    }


@app.post("/parse/", response_model=QueryResponse)
async def parse_query(request: QueryRequest):
    """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    """
    try:
        result = await agent.parse_message(request.text)
        
        intent_data = result.get("intent", {})
        intent      = intent_data.get("name", "unknown")
        confidence  = intent_data.get("confidence", 0.0)
        
        entities = {
            e.get("entity"): e.get("value") 
            for e in result.get("entities", [])
        }
            
        response = QueryResponse(
            query      = request.text,
            intent     = intent,
            entities   = entities,
            confidence = confidence
        )
        
        return response
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        raise HTTPException(
            status_code = 500,
            detail = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
        )


if __name__ == "__main__":
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ 0.0.0.0:8000")
    uvicorn.run(
        "server:app",
        host = "0.0.0.0",
        port = 8000,
        reload = False,
        log_level = "info"
    )