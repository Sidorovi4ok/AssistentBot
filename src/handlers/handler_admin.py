
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
from aiogram import types
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
from src.utils.logger import logger


async def admin_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.

    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –≤—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—é—â–µ–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ–º –∏ –∑–∞–ø—Ä–æ—Å.
    """

    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info(f"Received start command from {message.from_user.id}")

    admin_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏", callback_data="get_logs")],
        [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="get_users")],
    ])

    await message.answer(
        f"üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!",
        reply_markup=admin_kb
    )


async def get_log_callback_handler(callback_query: types.CallbackQuery):

    if callback_query.data == "get_logs":
        logger.info(f"Get logs by {callback_query.from_user.id}")

        try:
            with open("logs/main.log", "r") as f:
                logs = f.readlines()[-20:]
            await callback_query.message.edit_text(
                f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:</b>\n<code>{''.join(logs)}</code>",
                parse_mode="HTML"
            )
        except Exception as e:
            await callback_query.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)



async def control_users_callback_handler(callback_query: types.CallbackQuery):

    if callback_query.data == "get_users":
        logger.info(f"Gets users by {callback_query.from_user.id}")

        user_management_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")],
            [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="edit_user")],
            [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_user")],
            [InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        ])

        await callback_query.message.edit_text(
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:",
            reply_markup=user_management_kb
        )
