
"""
    handler_admin.py

    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã
"""



from aiogram       import types
from src.utils     import logger
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.utils.markdown import hbold, hcode
from src.managers.manager_user import User



"""
    cmd_admin_handler

    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã
"""
async def cmd_admin_handler(message: types.Message):
    logger.info(f"Received ADMIN command FROM {message.from_user.id}")
    try:
        admin_main_menu_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞–º–∏",         callback_data="menu_logs")],
            [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö",   callback_data="menu_db")],
            [InlineKeyboardButton(text="ü§ñ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞",         callback_data="restart_bot")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é",              callback_data="admin_close")],
        ])
        await message.answer(
            f"üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!",
            reply_markup=admin_main_menu_kb
        )
        await message.delete()
    except Exception as e:
        logger.exception(f"ERROR in cmd_admin_handler FOR user_id={message.from_user.id}")
        await message.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)



"""
    admin_logs_menu_callback_handler
    
    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback menu_logs –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
"""
async def admin_logs_menu_callback_handler(callback: types.CallbackQuery):
    if callback.data == "menu_logs":
        logger.info(f"View admin logs menu command from {callback.from_user.id}")
    try:
        admin_logs_menu_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÑ –í—ã–≤–µ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏",     callback_data="get_logs")],
            [InlineKeyboardButton(text="üìÇ –°–∫–∞—á–∞—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏", callback_data="download_logs")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",                      callback_data="admin_back")],
        ])
        await callback.message.edit_text("üõ† –ú–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã:")
        await callback.message.edit_reply_markup(reply_markup=admin_logs_menu_kb)
        await callback.answer()
    except Exception as e:
        logger.exception(f"ERROR in get_log_menu_callback_handler FOR user_id={callback.from_user.id}")
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)



"""
    admin_view_logs_callback_handler

    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback get_logs –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ logs/main.log
"""
async def admin_view_logs_callback_handler(callback: types.CallbackQuery):
    if callback.data == "get_logs":
        logger.info(f"Get logs by {callback.from_user.id}")
        try:
            with open("logs/main.log", "r") as f:
                await (callback.message.edit_text(
               f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:</b>\n<code>{''.join(f.readlines()[-25:])}</code>",
                    parse_mode="HTML"
                ))
                admin_logs_menu_kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_logs")],
                ])
                await callback.message.edit_reply_markup(reply_markup=admin_logs_menu_kb)
                await callback.answer()
        except Exception as e:
            logger.exception(f"ERROR in view_log_callback_handler FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)



"""
    admin_download_logs_callback_handler

    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback download_logs –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–∞–º–∏
"""
async def admin_download_logs_callback_handler(callback: types.CallbackQuery):
    if callback.data == "download_logs":
        logger.info(f"Download logs by {callback.from_user.id}")
        try:
            log_file = FSInputFile("logs/main.log")
            await callback.message.answer_document(
                document=log_file,
                caption="üìù –í–æ—Ç –≤–∞—à —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç"
            )
            await callback.answer()
        except Exception as e:
            logger.exception(f"ERROR in admin_download_logs_callback_handler FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)



"""
    admin_db_menu_callback_handler

    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback menu_db –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""
async def admin_db_menu_callback_handler(callback: types.CallbackQuery):
    if callback.data == "menu_db":
        logger.info(f"View admin database menu command from by {callback.from_user.id}")
        try:
            admin_users_menu_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",  callback_data="admin_get_users")],
                [InlineKeyboardButton(text="üñãÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_edit_user")],
                [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",  callback_data="admin_delete_user")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",                 callback_data="admin_back")],
            ])
            await callback.message.edit_text("üõ† –ú–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã:")
            await callback.message.edit_reply_markup(reply_markup=admin_users_menu_kb)
            await callback.answer()
        except Exception as e:
            logger.exception(f"ERROR in admin_db_menu_callback_handler FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)



"""
    admin_get_users_callback_handler

    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback admin_get_users –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""
async def admin_get_users_callback_handler(callback: types.CallbackQuery):
    if callback.data == "admin_get_users":
        logger.info(f"Get admin list users command from by {callback.from_user.id}")
        try:
            session = callback.bot.user_manager.Session()
            users = session.query(User).all()

            user_lines = []
            for u in users:
                user_lines.append(
                    f"{hbold('–ò–ù–ù')}: {hcode(u.inn)}\n"
                    f"{hbold('–¢–∏–ø')}: {callback.bot.user_manager.get_user_type_name(u.user_type)}\n"
                    f"{hbold('Telegram ID')}: {u.telegram_id or '‚ùå'}\n"
                    f"{hbold('–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')}: {'‚úÖ' if u.is_authenticated else '‚ùå'}\n"
                    f"-------------------------"
                )
            await callback.message.edit_text(
                text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n".join(user_lines),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_db")]
                ])
            )
            await callback.answer()
        except Exception as e:
            logger.exception(f"ERROR in admin_get_users_callback_handler FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)



"""
    admin_back_menu_callback_handler

    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback admin_back –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""
async def admin_back_menu_callback_handler(callback: types.CallbackQuery):
    if callback.data == "admin_back":
        logger.info(f"Back admin menu by {callback.from_user.id}")
        try:
            admin_main_menu_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞–º–∏",       callback_data="menu_logs")],
                [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö", callback_data="menu_db")],
                [InlineKeyboardButton(text="ü§ñ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞",       callback_data="restart_bot")],
                [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é",            callback_data="admin_close")],
            ])
            await callback.message.edit_text(f"üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback.from_user.first_name}!")
            await callback.message.edit_reply_markup(reply_markup=admin_main_menu_kb)
            await callback.answer()
        except Exception as e:
            logger.exception(f"ERROR in admin_back_menu_callback_handler FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)



"""
    admin_close_menu_callback_handler

    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback admin_close –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""
async def admin_close_menu_callback_handler(callback: types.CallbackQuery):
    if callback.data == "admin_close":
        logger.info(f"Close admin menu by {callback.from_user.id}")
        try:
            await callback.message.delete()
            await callback.answer()
        except Exception as e:
            logger.exception(f"ERROR in admin_close_menu_callback_handler FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)