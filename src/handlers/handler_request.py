"""
handler_request.py

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤.
–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤—ã–±–∏—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–∏—Å–∫–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É.
"""

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
import requests
import re
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.utils.formatting import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
from src.utils import logger, SearchService
from src.states import RequestStates


async def request_handler(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /request.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –≤—ã–±–æ—Ä–∞.
    """
    logger.info(f"Received request command from {message.from_user.id}")

    data_manager = message.bot.data_manager
    lists = data_manager.get_sheet_names()

    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
    list_keyboard = InlineKeyboardMarkup(
        inline_keyboard=
        [
            [InlineKeyboardButton(text=sheet_name, callback_data=f"sheet_{sheet_name}")]
            for sheet_name in lists
        ] + [
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_")]
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    sent_message = await message.answer(
        "üìö –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=list_keyboard
    )

    await state.set_state(RequestStates.choosing_list)
    await state.update_data(request_message_id=sent_message.message_id)


async def receive_request(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    logger.info(f"Request received from {message.from_user.id}: {message.text}")

    user_data = await state.get_data()
    request_message_id = user_data.get("request_message_id")
    choosing_list = user_data.get("choosing_list")

    data_manager = message.bot.data_manager
    data_frame = data_manager.get_table_data(choosing_list)

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
    if request_message_id:
        try:
            await message.bot.edit_message_reply_markup(
                chat_id=message.chat.id,
                message_id=request_message_id,
                reply_markup=None
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                logger.error(f"Error editing message: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    rasa_manager = message.bot.rasa_manager
    emb_manager  = message.bot.embedding_manager
    search_service = SearchService(data_manager, rasa_manager)
    result = search_service.search_smart(message.text, choosing_list, emb_manager)

    if result.empty:
        await message.answer("üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode="Markdown")
        return

    # –ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
    url = "https://api.intelligence.io.solutions/api/v1/chat/completions"

    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer io-v2-eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvd25lciI6IjcxZjA0YjZhLTIxMjQtNDI4MS1iMTkxLTUyMzAwN2JiYjk4NSIsImV4cCI6NDg5NjQ5MzM3NH0.QXE6r9Gbdkpv_fzI6lbgIG8uU8EkKpH3vMw-KK7enDimGsQWfrl6xdIT5MD0Lg_xUwGWyAdm5haLix_rf4mlcw",
    }

    data = {
        "model": "neuralmagic/Llama-3.1-Nemotron-70B-Instruct-HF-FP8-dynamic",
        "messages": [
            {
                "role": "system",
                "content":
                    '''
                        –¢—ã –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏.
                        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏ –æ—Ñ–æ—Ä–º–∏ –æ—Ç–≤–µ—Ç —Ç–æ—á–Ω–æ –ø–æ —à–∞–±–ª–æ–Ω—É –Ω–∏–∂–µ. 
                        –ò–∑–±–µ–≥–∞–π —Å–ø–ª–æ—à–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –°–æ—Ö—Ä–∞–Ω—è–π –ª–∞–∫–æ–Ω–∏—á–Ω–æ—Å—Ç—å –∏ –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É.
    
                        –°–Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –∑–∞–ø—Ä–æ—Å–µ), –∑–∞—Ç–µ–º –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º –µ–≥–æ —Ç–æ–≤–∞—Ä–µ
                        [–û—Ç–≤–µ—Ç:]
    
                        –®–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:  
                            ### 1. –¢–æ–≤–∞—Ä:
                                - –ê—Ä—Ç–∏–∫—É–ª: [–∑–Ω–∞—á–µ–Ω–∏–µ]
                                - –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: [–∑–Ω–∞—á–µ–Ω–∏–µ]
                                - –û–ø–∏—Å–∞–Ω–∏–µ: [–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å]
                            
                            ### 2. –¶–µ–Ω—ã:
                                - –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: [–∑–Ω–∞—á–µ–Ω–∏–µ]
                                - –¶–µ–Ω–∞ —Å –ù–î–°: [–∑–Ω–∞—á–µ–Ω–∏–µ]
                                - –†–†–¶: [–∑–Ω–∞—á–µ–Ω–∏–µ]
                                - –ê–∫—Ü–∏–∏/–°–∫–∏–¥–∫–∏: –ù–µ —É–∫–∞–∑–∞–Ω—ã
                            
                            ### 3. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
                                - –ï–¥. –∏–∑–º.: [—à—Ç / –∫–æ–º–ø–ª]
                                - –ö–æ–ª-–≤–æ –ª–∏—Å—Ç–æ–≤: [–∑–Ω–∞—á–µ–Ω–∏–µ]
                                - –§–æ—Ä–º–∞—Ç: [–∑–Ω–∞—á–µ–Ω–∏–µ]
                                - –ö–ª–∞—Å—Å: [–∑–Ω–∞—á–µ–Ω–∏–µ]
                                - –ú–∞—Ç–µ—Ä–∏–∞–ª: [–∑–Ω–∞—á–µ–Ω–∏–µ]
                                - –ö–∞—Ä—Ç—ã, —Å—Ç–µ–Ω–¥—ã, —Ç–∞–±–ª–∏—Ü—ã: [–∫–∞—Ä—Ç–∞ / —Å—Ç–µ–Ω–¥ / —Ç–∞–±–ª–∏—Ü–∞]
                            
                            ### 4. –ù–∞–ª–∏—á–∏–µ:
                                - –°—Ç–∞—Ç—É—Å: [–¢—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è]
                            
                            ### 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
                                –ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã:
                                    - (–ê—Ä—Ç–∏–∫—É–ª 1: [–∑–Ω–∞—á–µ–Ω–∏–µ 1]), [–ù–∞–∑–≤–∞–Ω–∏–µ 1], —Ü–µ–Ω–∞ 1: [–∑–Ω–∞—á–µ–Ω–∏–µ 1], –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 1: [–æ–ø–∏—Å–∞–Ω–∏–µ 1]
                                    - (–ê—Ä—Ç–∏–∫—É–ª 2: [–∑–Ω–∞—á–µ–Ω–∏–µ 2]), [–ù–∞–∑–≤–∞–Ω–∏–µ 2], —Ü–µ–Ω–∞ 2: [–∑–Ω–∞—á–µ–Ω–∏–µ 2], –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 2: [–æ–ø–∏—Å–∞–Ω–∏–µ 2]
                    '''
                    +
                    f"–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {result}."
            },
            {
                "role": "user",
                "content": f"–ó–∞–ø—Ä–æ—Å: {message.text}."
            }
        ],
    }

    response = requests.post(url, headers=headers, json=data)
    data = response.json()

    text = data['choices'][0]['message']['content']
    await message.answer(text, "Markdown")



async def tables_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞ (–ê—Ä—Ç–∏–∫—É–ª / –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ).
    """
    if callback_query.data.startswith("sheet_"):
        chosen_list = callback_query.data.split("_", 1)[1]
        logger.info(f"User selected list: {chosen_list}")

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø–æ–∏—Å–∫–∞
        priority_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_")
            ]
        ])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {chosen_list}\n\n"
            "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:",
            reply_markup=priority_keyboard
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(choosing_list=chosen_list)
        await state.set_state(RequestStates.waiting_for_request)
        await callback_query.answer()


async def cancel_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É.
    –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å.
    """
    if callback_query.data == "cancel_":
        logger.info(f"Cancel by {callback_query.from_user.id}")

        user_data = await state.get_data()
        request_message_id = user_data.get("request_message_id")

        try:
            if request_message_id:
                await callback_query.bot.edit_message_reply_markup(
                    chat_id=callback_query.message.chat.id,
                    message_id=request_message_id,
                    reply_markup=None
                )
        except TelegramBadRequest:
            pass

        await state.clear()
        await callback_query.message.edit_text("üö´ –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await callback_query.answer()