
"""
handler_request.py

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤.
–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤—ã–±–∏—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–∏—Å–∫–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É.
"""

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
import requests

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
from src.utils.logger import logger
from src.utils.search import VectorSearchManager
from src.filters import filter_article, filter_product_name

from src.states import RequestStates


async def request_handler(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /request.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –≤—ã–±–æ—Ä–∞.
    """
    logger.info(f"Received request command from {message.from_user.id}")

    data_manager = message.bot.data_manager
    lists = data_manager.get_sheet_names()

    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
    list_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=sheet_name, callback_data=f"sheet_{sheet_name}")]
            for sheet_name in lists
        ] + [
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_")]
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    sent_message = await message.answer(
        "üìö –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=list_keyboard
    )

    await state.set_state(RequestStates.choosing_list)
    await state.update_data(request_message_id=sent_message.message_id)


async def receive_request(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    logger.info(f"Request received from {message.from_user.id}: {message.text}")

    user_data = await state.get_data()
    request_message_id = user_data.get("request_message_id")
    choosing_list = user_data.get("choosing_list")
    priority = user_data.get("search_priority")

    data_manager = message.bot.data_manager
    data_frame = data_manager.get_table_data(choosing_list)

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
    if request_message_id:
        try:
            await message.bot.edit_message_reply_markup(
                chat_id=message.chat.id,
                message_id=request_message_id,
                reply_markup=None
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                logger.error(f"Error editing message: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–∏—Å–∫–∞ –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω—ã–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º
    vector_search = VectorSearchManager(data_manager, table_name=choosing_list, text_column=priority)

    search_query = filter_article(message.text) if priority == "–ê—Ä—Ç–∏–∫—É–ª" else filter_product_name(message.text)
    logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {search_query}")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    results, distances = vector_search.search(search_query, top_k=3)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
    filtered_data = results.to_json(orient="records", force_ascii=False)

    # –ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
    url = "https://api.intelligence.io.solutions/api/v1/chat/completions"

    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer io-v2-eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvd25lciI6IjcxZjA0YjZhLTIxMjQtNDI4MS1iMTkxLTUyMzAwN2JiYjk4NSIsImV4cCI6NDg5NjQ5MzM3NH0.QXE6r9Gbdkpv_fzI6lbgIG8uU8EkKpH3vMw-KK7enDimGsQWfrl6xdIT5MD0Lg_xUwGWyAdm5haLix_rf4mlcw",
    }

    data = {
        "model": "deepseek-ai/DeepSeek-R1",
        "messages": [
            {
                "role": "system",
                "content":
                    '''
                        –¢—ã –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏.
                        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏ –æ—Ñ–æ—Ä–º–∏ –æ—Ç–≤–µ—Ç **—Ç–æ—á–Ω–æ –ø–æ —à–∞–±–ª–æ–Ω—É –Ω–∏–∂–µ**. 
                        –í—ã–¥–µ–ª—è–π –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Ü–µ–Ω—ã, –Ω–∞–ª–∏—á–∏–µ, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏), –∏—Å–ø–æ–ª—å–∑—É–π —á—ë—Ç–∫–∏–µ —Ä–∞–∑–¥–µ–ª—ã –∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏. –ò–∑–±–µ–≥–∞–π —Å–ø–ª–æ—à–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. 
    
                        **–®–∞–±–ª–æ–Ω:**  
                        **–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–∫–ª–∏–µ–Ω—Ç–∞**  
                        
                        1. **–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞**  
                           - [–ù–∞–∑–≤–∞–Ω–∏–µ]  
                           - **–ö–∞—Ç–µ–≥–æ—Ä–∏—è/–¢–µ–º–∞—Ç–∏–∫–∞**: [–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞]  
                        
                        2. **–¶–µ–Ω—ã**  
                           - **–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞**: [–∑–Ω–∞—á–µ–Ω–∏–µ] (–≤—ã–¥–µ–ª–∏ –∂–∏—Ä–Ω—ã–º)  
                           - **–¶–µ–Ω–∞ —Å –ù–î–°**: [–∑–Ω–∞—á–µ–Ω–∏–µ]  
                           - **–†–†–¶ (–†–µ–∫. —Ä–æ–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞)**: [–∑–Ω–∞—á–µ–Ω–∏–µ]  
                           - **–ê–∫—Ü–∏–∏/–°–∫–∏–¥–∫–∏**: [–µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ "–ù–µ —É–∫–∞–∑–∞–Ω—ã"]  
                        
                        3. **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏**  
                           - [–ü–∞—Ä–∞–º–µ—Ç—Ä 1]: [–∑–Ω–∞—á–µ–Ω–∏–µ]  
                           - [–ü–∞—Ä–∞–º–µ—Ç—Ä 2]: [–∑–Ω–∞—á–µ–Ω–∏–µ]  
                           - ...  
                        
                        4. **–ù–∞–ª–∏—á–∏–µ**  
                           - **–ù–∞ —Å–∫–ª–∞–¥–µ**: [–î–æ—Å—Ç—É–ø–Ω–æ/–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏/–¢—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è]  
                        
                        5. **–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏**  
                           - [–§—Ä–∞–∑–∞ 1]  
                           - [–§—Ä–∞–∑–∞ 2]  
                        
                        6. **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**  
                           - **–°–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã**: [–°–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏]  
                           - **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã**: [–ù–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–∞, –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ]  
                        
                        **–í–∞–∂–Ω–æ:**  
                        - –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (—Ü–µ–Ω—ã, —Ä–∞–∑–º–µ—Ä—ã) –≤—ã–¥–µ–ª—è–π –∂–∏—Ä–Ω—ã–º.  
                        - –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø–∏—à–∏ "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" –∏–ª–∏ "–¢—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è".  
                        - –°–æ—Ö—Ä–∞–Ω—è–π –ª–∞–∫–æ–Ω–∏—á–Ω–æ—Å—Ç—å.  
                    '''
                    +
                        f"–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {filtered_data}."
            },
            {
                "role": "user",
                "content": f"–ó–∞–ø—Ä–æ—Å: {message.text}."
            }
        ],
    }


    response = requests.post(url, headers=headers, json=data)
    data = response.json()

    text = data['choices'][0]['message']['content']
    bot_text = text.split('</think>\n\n')[1]

    await message.answer(bot_text, parse_mode="Markdown")


async def tables_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞ (–ê—Ä—Ç–∏–∫—É–ª / –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ).
    """
    if callback_query.data.startswith("sheet_"):
        chosen_list = callback_query.data.split("_", 1)[1]
        logger.info(f"User selected list: {chosen_list}")

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø–æ–∏—Å–∫–∞
        priority_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–ê—Ä—Ç–∏–∫—É–ª", callback_data="priority_–ê—Ä—Ç–∏–∫—É–ª"),
                InlineKeyboardButton(text="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", callback_data="priority_–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")
            ],
            [
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_")
            ]
        ])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {chosen_list}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:",
            reply_markup=priority_keyboard
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(choosing_list=chosen_list)
        await callback_query.answer()


async def search_priority_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ–∏—Å–∫–∞ (–ê—Ä—Ç–∏–∫—É–ª / –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ).
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
    """
    if callback_query.data.startswith("priority_"):
        priority = callback_query.data.split("_", 1)[1]
        logger.info(f"Search priority selected: {priority}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text(
            callback_query.message.text + f"\n\n–í—ã–±—Ä–∞–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–∏—Å–∫–∞: {priority}\n\n"
                                          "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:\n\n"
                                          "<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:</i>\n"
                                          "<i>–ê—Ä—Ç–∏–∫—É–ª: –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ—á–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª (XXXX-XXXX)</i>\n"
                                          "<i>–ù–∞–∏–º–µ–Ω–æ–≤–Ω–∏–µ: –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö (\"–ù–∞–∑–≤–∞–Ω–∏–µ\")</i>",
            reply_markup=None
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–∏—Å–∫–∞
        await state.update_data(search_priority=priority)
        await state.set_state(RequestStates.waiting_for_request)
        await callback_query.answer()


async def cancel_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É.
    –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å.
    """
    if callback_query.data == "cancel_":
        logger.info(f"Cancel by {callback_query.from_user.id}")

        user_data = await state.get_data()
        request_message_id = user_data.get("request_message_id")

        try:
            if request_message_id:
                await callback_query.bot.edit_message_reply_markup(
                    chat_id=callback_query.message.chat.id,
                    message_id=request_message_id,
                    reply_markup=None
                )
        except TelegramBadRequest:
            pass

        await state.clear()
        await callback_query.message.edit_text("üö´ –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await callback_query.answer()
