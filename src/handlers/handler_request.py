"""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë           handlers/request.py              ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    
    –û–ø–∏—Å–∞–Ω–∏–µ:
        –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
"""

import os
import pandas as pd
from pathlib import Path
import asyncio
from datetime import datetime
import json

from aiogram                   import types
from aiogram.fsm.context       import FSMContext
from aiogram.exceptions        import TelegramBadRequest
from aiogram.types             import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile

from src.utils                 import logger
from src.states                import RequestStates
from src.services              import TextGenerator
from src.services              import RasaClient   
from src.utils                 import ExcelProcessor
from src.filters               import filter_only_auth


async def request_handler(message: types.Message, state: FSMContext):
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /request.
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –≤—ã–±–æ—Ä–∞.
    """
    if not await filter_only_auth(message):
        return
    logger.info(f"Received request command from {message.from_user.id}")
    
    request_main_manu = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üñäÔ∏è –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data="request_text_menu")],
        [InlineKeyboardButton(text="üìÉ –§–∞–π–ª–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",  callback_data="request_file_menu")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é",     callback_data="request_close_menu")],
    ])
    
    sent_message = await message.answer(
        "üìö –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–æ–∏—Å–∫–∞:",
        reply_markup=request_main_manu
    )
    await state.update_data(request_message_id=sent_message.message_id)


async def request_text_menu(callback: types.CallbackQuery, state: FSMContext):
    """
        –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–µ–Ω—é —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    """
    if callback.data == "request_text_menu":
        logger.info(f"Get request menu command from {callback.from_user.id}")
        try:
            lists = callback.bot.dm.get_sheet_names()
            request_table_text = InlineKeyboardMarkup(
                inline_keyboard=
                [
                    [InlineKeyboardButton(text=sheet_name, callback_data=f"sheet_{sheet_name}")]
                    for sheet_name in lists
                ] + [
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="request_back_main_menu")]
                ]
            )

            await callback.message.edit_text("üìö –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–∏—Å–∫–∞:")
            await callback.message.edit_reply_markup(reply_markup=request_table_text)
            await state.set_state(RequestStates.choosing_list)
            await callback.answer()
            
        except Exception as e:
            logger.exception(f"ERROR in request_text_menu FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
            

async def tables_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É.
    """
    if callback_query.data.startswith("sheet_"):
        chosen_list = callback_query.data.split("_", 1)[1]
        logger.info(f"User selected list: {chosen_list}")

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø–æ–∏—Å–∫–∞
        priority_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_")
            ]
        ])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {chosen_list}\n\n"
            "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:",
            reply_markup=priority_keyboard
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(choosing_list=chosen_list)
        await state.set_state(RequestStates.waiting_for_request)
        await callback_query.answer()


async def cancel_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É.
        –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å.
    """
    if callback_query.data == "cancel_":
        logger.info(f"Cancel by {callback_query.from_user.id}")

        user_data = await state.get_data()
        request_message_id = user_data.get("request_message_id")

        try:
            if request_message_id:
                await callback_query.bot.edit_message_reply_markup(
                    chat_id=callback_query.message.chat.id,
                    message_id=request_message_id,
                    reply_markup=None
                )
        except TelegramBadRequest:
            pass

        await state.clear()
        await callback_query.message.edit_text("üö´ –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await callback_query.answer()
    
    
async def receive_request(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    logger.info(f"Request received from {message.from_user.id}: {message.text}")

    user_data = await state.get_data()
    request_message_id = user_data.get("request_message_id")
    choosing_list = user_data.get("choosing_list")

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
    if request_message_id:
        try:
            await message.bot.edit_message_reply_markup(
                chat_id=message.chat.id,
                message_id=request_message_id,
                reply_markup=None
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                logger.error(f"Error editing message: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è RasaClient
    async with RasaClient() as rc:
        search_data = await rc.process_query(message.text)
        search_entity, search_intent, target_column = search_data

        if search_intent == 'search_by_artikul':
            search_entity = search_entity['artikul']
        elif search_intent == 'search_by_naimenovanie':
            search_entity = search_entity['naimenovanie']
        elif search_intent == 'search_by_description':
            search_entity = search_entity['description']
            
        distances, indices = message.bot.em.search(choosing_list, target_column, search_entity)

        if distances is not None and indices is not None:
            found_products = []
            
            for i, (distance, idx) in enumerate(zip(distances, indices), 1):
                product_data = message.bot.dm.get_table_data(choosing_list).iloc[idx]
                product_dict = product_data.to_dict()
                found_products.append(product_dict)
                print(product_dict)

            with pd.option_context('display.max_rows', None):
                result_df = pd.DataFrame(found_products)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è TextGenerator
            async with TextGenerator() as text_generator:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DataFrame –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è LLM
                formatted_data = []
                for _, row in result_df.iterrows():
                    product_info = {
                        "–ê—Ä—Ç–∏–∫—É–ª": row.get("–ê—Ä—Ç–∏–∫—É–ª", ""),
                        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", ""),
                        "–û–ø–∏—Å–∞–Ω–∏–µ": row.get("–û–ø–∏—Å–∞–Ω–∏–µ", ""),
                        "–¶–µ–Ω–∞": row.get("–¶–µ–Ω–∞", ""),
                        "–¶–µ–Ω–∞ —Å –ù–î–°": row.get("–¶–µ–Ω–∞ —Å –ù–î–°", ""),
                        "–†–†–¶": row.get("–†–†–¶", ""),
                        "–ï–¥. –∏–∑–º.": row.get("–ï–¥. –∏–∑–º.", ""),
                        "–ö–æ–ª-–≤–æ –ª–∏—Å—Ç–æ–≤": row.get("–ö–æ–ª-–≤–æ –ª–∏—Å—Ç–æ–≤", ""),
                        "–§–æ—Ä–º–∞—Ç": row.get("–§–æ—Ä–º–∞—Ç", ""),
                        "–ö–ª–∞—Å—Å": row.get("–ö–ª–∞—Å—Å", ""),
                        "–ú–∞—Ç–µ—Ä–∏–∞–ª": row.get("–ú–∞—Ç–µ—Ä–∏–∞–ª", ""),
                        "–ö–∞—Ä—Ç—ã, —Å—Ç–µ–Ω–¥—ã, —Ç–∞–±–ª–∏—Ü—ã": row.get("–ö–∞—Ä—Ç—ã, —Å—Ç–µ–Ω–¥—ã, —Ç–∞–±–ª–∏—Ü—ã", "")
                    }
                    formatted_data.append(product_info)
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                formatted_json = json.dumps(formatted_data, ensure_ascii=False, indent=2)
                
                request_kb = InlineKeyboardMarkup(
                    inline_keyboard= [
                        [InlineKeyboardButton(text="üìó –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª-—Å—á–µ—Ç", callback_data="test1")],
                        [InlineKeyboardButton(text="üìò –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª-–∫–ø", callback_data="test2")]
                    ]
                )
                
                generated_text = await text_generator.generate_text(message.text, formatted_json)
                await message.answer(text=generated_text, reply_markup=request_kb)
        else:
            await message.answer("üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return


async def request_file_menu(callback: types.CallbackQuery, state: FSMContext):
    """
        –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    """
    if callback.data == "request_file_menu":
        logger.info(f"Get request file command from {callback.from_user.id}")
        try:
            request_file_kb = InlineKeyboardMarkup(
                inline_keyboard= [
                    [InlineKeyboardButton(text="üì© –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ö–ü –ø–æ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É", callback_data="request_from_file")],
                    [InlineKeyboardButton(text="üìä –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞",         callback_data="request_get_example")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",                           callback_data="request_back_main_menu")]
                ]
            )

            await callback.message.edit_text("üìö –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ö–ü, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–∏–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º:")
            await callback.message.edit_reply_markup(reply_markup=request_file_kb)
            await callback.answer()
            
        except Exception as e:
            logger.exception(f"ERROR in request_file_menu FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


async def request_get_example(callback: types.CallbackQuery, state: FSMContext):
    """
        –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    """
    if callback.data == "request_get_example":
        logger.info(f"Get request get example menu from {callback.from_user.id}")
        try:
            example_file = FSInputFile("data/excel/example-format.xlsx")
            await callback.message.answer_document(
                document=example_file,
                caption="üìä –í–æ—Ç —Ñ–∞–π–ª-–ø—Ä–∏–º–µ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–∏—Å—Ç–µ–º—É"
            )
            await callback.answer()
        except Exception as e:
            logger.exception(f"ERROR in admin_download_logs_callback_handler FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)




async def request_from_file(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "request_from_file":
        logger.info(f"Request excel-prfrom file by {callback.from_user.id}")
        try:
            await callback.message.answer("üìé –û–∂–∏–¥–∞–µ–º –í–∞—à Excel-—Ñ–∞–π–ª (.xlsx) –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∞–π–ª–∞ –ö–ü –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–∏–∏ —Å –Ω–∞—à–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏")
            await state.set_state(RequestStates.waiting_for_file)
        except Exception as e:
            logger.exception(f"ERROR in request_from_file FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
            
            
async def handle_request_excel_file(message: types.Message, state: FSMContext):
    logger.info(f"Get request excel by {message.from_user.id}")
    input_file = None
    output_file = None
    progress_message = None
    last_progress_text = None
    
    try:
        document = message.document
        if not document.file_name.endswith(".xlsx"):
            await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx")
            return

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤
        temp_dir = Path("data/excel/requests_files")
        temp_dir.mkdir(exist_ok=True)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        input_file = temp_dir / f"input_{timestamp}_{document.file_name}"
        output_file = temp_dir / f"result_{timestamp}_{Path(document.file_name).stem}_–†–ê–°–ß–ï–¢_–ö–ü.xlsx"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        progress_message = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await message.bot.download(document, destination=input_file)
        await progress_message.edit_text("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        async def update_progress(progress: float):
            nonlocal last_progress_text
            progress_text = f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {int(progress * 100)}%"
            if progress < 0.3:
                progress_text += "\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞..."
            elif progress < 0.8:
                progress_text += "\nüìä –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ..."
            elif progress < 0.9:
                progress_text += "\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..."
            else:
                progress_text += "\n‚ú® –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
            if progress_text != last_progress_text:
                try:
                    await progress_message.edit_text(progress_text)
                    last_progress_text = progress_text
                except Exception as e:
                    logger.error(f"Error updating progress: {e}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        processor = ExcelProcessor()
        processor.set_progress_callback(update_progress)
        
        try:
            success, error_message = await processor.process_file_async(str(input_file), str(output_file))
        except Exception as e:
            logger.exception("Error during file processing")
            success, error_message = False, str(e)

        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            await progress_message.edit_text("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            sent_document = await message.answer_document(
                document=FSInputFile(output_file),
                caption="‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –í–æ—Ç –≤–∞—à —Ä–∞—Å—á–µ—Ç –ö–ü:"
            )
            
            # –ñ–¥–µ–º, –ø–æ–∫–∞ —Ñ–∞–π–ª –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            await asyncio.sleep(2)
        else:
            await progress_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {error_message}")

        await state.clear()
    except Exception as e:     
        logger.exception(f"ERROR in handle_excel_file FOR user_id={message.from_user.id}")
        if progress_message:
            logger.exception(f"ERROR in handle_excel_file FOR user_id={message.from_user.id}")
        else:
            logger.exception(f"ERROR in handle_excel_file FOR user_id={message.from_user.id}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        if input_file or output_file:
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            for attempt in range(5):  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                try:
                    if input_file and input_file.exists():
                        try:
                            # –ü—Ä–æ–±—É–µ–º –∑–∞–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                            import gc
                            gc.collect()
                            await asyncio.sleep(1)
                            input_file.unlink()
                            logger.info(f"Successfully deleted input file: {input_file}")
                        except Exception as e:
                            logger.error(f"Error deleting input file (attempt {attempt + 1}): {e}")
                            await asyncio.sleep(2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                    
                    if output_file and output_file.exists():
                        try:
                            # –ü—Ä–æ–±—É–µ–º –∑–∞–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                            import gc
                            gc.collect()
                            await asyncio.sleep(1)
                            output_file.unlink()
                            logger.info(f"Successfully deleted output file: {output_file}")
                        except Exception as e:
                            logger.error(f"Error deleting output file (attempt {attempt + 1}): {e}")
                            await asyncio.sleep(2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                    
                    # –ï—Å–ª–∏ –æ–±–∞ —Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                    if (not input_file or not input_file.exists()) and (not output_file or not output_file.exists()):
                        break
                        
                except Exception as e:
                    logger.error(f"Error in cleanup attempt {attempt + 1}: {e}")
                    await asyncio.sleep(2)


async def request_back_main_menu(callback: types.CallbackQuery, state: FSMContext):
    """
        –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    if callback.data == "request_back_main_menu":
        logger.info(f"Get request back main menu from {callback.from_user.id}")
        try:
            request_main_manu = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üñäÔ∏è –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data="request_text_menu")],
                [InlineKeyboardButton(text="üìÉ –§–∞–π–ª–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",  callback_data="request_file_menu")],
                [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é",     callback_data="request_close_menu")],
            ])

            await callback.message.edit_text("üìö –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–æ–∏—Å–∫–∞:")
            await callback.message.edit_reply_markup(reply_markup=request_main_manu)
            await callback.answer()
            
        except Exception as e:
            logger.exception(f"ERROR in request_file_menu FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


async def request_close_menu(callback: types.CallbackQuery, state: FSMContext):
    """
        –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    if callback.data == "request_close_menu":
        logger.info(f"Get request close main menu from {callback.from_user.id}")
        try:
            await callback.message.delete()
            await callback.answer()
        except Exception as e:
            logger.exception(f"ERROR in request_close_menu FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        



















