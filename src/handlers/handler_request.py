"""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë           handlers/request.py              ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    
    –û–ø–∏—Å–∞–Ω–∏–µ:
        –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
"""


import pandas as pd

from aiogram                   import types
from aiogram.fsm.context       import FSMContext
from aiogram.exceptions        import TelegramBadRequest
from aiogram.types             import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile

from src.utils                 import logger
from src.states                import RequestStates
from src.services              import TextGenerator
from src.services              import RasaClient



async def request_handler(message: types.Message, state: FSMContext):
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /request.
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –≤—ã–±–æ—Ä–∞.
    """
    logger.info(f"Received request command from {message.from_user.id}")
    
    request_main_manu = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üñäÔ∏è –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data="request_text_menu")],
        [InlineKeyboardButton(text="üìÉ –§–∞–π–ª–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",  callback_data="request_file_menu")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é",     callback_data="request_close_menu")],
    ])
    
    sent_message = await message.answer(
        "üìö –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–æ–∏—Å–∫–∞:",
        reply_markup=request_main_manu
    )
    await state.update_data(request_message_id=sent_message.message_id)


async def request_text_menu(callback: types.CallbackQuery, state: FSMContext):
    """
        –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–µ–Ω—é —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    """
    if callback.data == "request_text_menu":
        logger.info(f"Get request menu command from {callback.from_user.id}")
        try:
            lists = callback.bot.dm.get_sheet_names()
            request_table_text = InlineKeyboardMarkup(
                inline_keyboard=
                [
                    [InlineKeyboardButton(text=sheet_name, callback_data=f"sheet_{sheet_name}")]
                    for sheet_name in lists
                ] + [
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="request_back_main_menu")]
                ]
            )

            await callback.message.edit_text("üìö –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–∏—Å–∫–∞:")
            await callback.message.edit_reply_markup(reply_markup=request_table_text)
            await state.set_state(RequestStates.choosing_list)
            await callback.answer()
            
        except Exception as e:
            logger.exception(f"ERROR in request_text_menu FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
            

async def tables_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É.
    """
    if callback_query.data.startswith("sheet_"):
        chosen_list = callback_query.data.split("_", 1)[1]
        logger.info(f"User selected list: {chosen_list}")

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø–æ–∏—Å–∫–∞
        priority_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_")
            ]
        ])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {chosen_list}\n\n"
            "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:",
            reply_markup=priority_keyboard
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(choosing_list=chosen_list)
        await state.set_state(RequestStates.waiting_for_request)
        await callback_query.answer()


async def cancel_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É.
        –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å.
    """
    if callback_query.data == "cancel_":
        logger.info(f"Cancel by {callback_query.from_user.id}")

        user_data = await state.get_data()
        request_message_id = user_data.get("request_message_id")

        try:
            if request_message_id:
                await callback_query.bot.edit_message_reply_markup(
                    chat_id=callback_query.message.chat.id,
                    message_id=request_message_id,
                    reply_markup=None
                )
        except TelegramBadRequest:
            pass

        await state.clear()
        await callback_query.message.edit_text("üö´ –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await callback_query.answer()
    
    
async def receive_request(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    logger.info(f"Request received from {message.from_user.id}: {message.text}")

    user_data = await state.get_data()
    request_message_id = user_data.get("request_message_id")
    choosing_list = user_data.get("choosing_list")

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
    if request_message_id:
        try:
            await message.bot.edit_message_reply_markup(
                chat_id=message.chat.id,
                message_id=request_message_id,
                reply_markup=None
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                logger.error(f"Error editing message: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è RasaClient
    async with RasaClient() as rc:
        search_data = await rc.process_query(message.text)
        search_entity, search_intent, target_column = search_data

        if search_intent == 'search_by_artikul':
            search_entity = search_entity['artikul']
        elif search_intent == 'search_by_naimenovanie':
            search_entity = search_entity['naimenovanie']
        elif search_intent == 'search_by_description':
            search_entity = search_entity['description']
            
        distances, indices = message.bot.em.search(choosing_list, target_column, search_entity)

        if distances is not None and indices is not None:
            found_products = []
            
            for i, (distance, idx) in enumerate(zip(distances, indices), 1):
                product_data = message.bot.dm.get_table_data(choosing_list).iloc[idx]
                product_dict = product_data.to_dict()
            
                found_products.append(product_dict)
                
                print(f"\n{i}. –¢–æ–≤–∞—Ä: {product_dict['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}")
                print(f"   –ê—Ä—Ç–∏–∫—É–ª:   {product_dict['–ê—Ä—Ç–∏–∫—É–ª']}")
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ:  {product_dict['–û–ø–∏—Å–∞–Ω–∏–µ']}")
                print(f"   –°—Ö–æ–∂–µ—Å—Ç—å:  {distance:.2%}")
            
            result_df = pd.DataFrame(found_products)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è TextGenerator
            async with TextGenerator() as text_generator:
                generated_text = await text_generator.generate_text(message.text, str(result_df))
                await message.answer(generated_text)
        else:
            await message.answer("üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return


async def request_file_menu(callback: types.CallbackQuery, state: FSMContext):
    """
        –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    """
    if callback.data == "request_file_menu":
        logger.info(f"Get request file command from {callback.from_user.id}")
        try:
            request_file_kb = InlineKeyboardMarkup(
                inline_keyboard= [
                    [InlineKeyboardButton(text="üì© –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ö–ü –ø–æ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É", callback_data="request_from_file")],
                    [InlineKeyboardButton(text="üìä –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞",         callback_data="request_get_example")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",                           callback_data="request_back_main_menu")]
                ]
            )

            await callback.message.edit_text("üìö –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ö–ü, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–∏–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º:")
            await callback.message.edit_reply_markup(reply_markup=request_file_kb)
            await callback.answer()
            
        except Exception as e:
            logger.exception(f"ERROR in request_file_menu FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


async def request_get_example(callback: types.CallbackQuery, state: FSMContext):
    """
        –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    """
    if callback.data == "request_get_example":
        logger.info(f"Get request get example menu from {callback.from_user.id}")
        try:
            example_file = FSInputFile("data/excel/example-format.xlsx")
            await callback.message.answer_document(
                document=example_file,
                caption="üìä –í–æ—Ç —Ñ–∞–π–ª-–ø—Ä–∏–º–µ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–∏—Å—Ç–µ–º—É"
            )
            await callback.answer()
        except Exception as e:
            logger.exception(f"ERROR in admin_download_logs_callback_handler FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


async def request_back_main_menu(callback: types.CallbackQuery, state: FSMContext):
    """
        –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    if callback.data == "request_back_main_menu":
        logger.info(f"Get request back main menu from {callback.from_user.id}")
        try:
            request_main_manu = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üñäÔ∏è –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data="request_text_menu")],
                [InlineKeyboardButton(text="üìÉ –§–∞–π–ª–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",  callback_data="request_file_menu")],
                [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é",     callback_data="request_close_menu")],
            ])

            await callback.message.edit_text("üìö –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–æ–∏—Å–∫–∞:")
            await callback.message.edit_reply_markup(reply_markup=request_main_manu)
            await callback.answer()
            
        except Exception as e:
            logger.exception(f"ERROR in request_file_menu FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


async def request_close_menu(callback: types.CallbackQuery, state: FSMContext):
    """
        –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    if callback.data == "request_close_menu":
        logger.info(f"Get request close main menu from {callback.from_user.id}")
        try:
            await callback.message.delete()
            await callback.answer()
        except Exception as e:
            logger.exception(f"ERROR in request_close_menu FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        



















