"""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                –ú–æ–¥—É–ª—å handlers/handler_manager.py          ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

    –û–ø–∏—Å–∞–Ω–∏–µ:
        –ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è
        —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Ç–æ–≤–∞—Ä–∞–º–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é.
        –í–∫–ª—é—á–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.

    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:
            - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏:
            - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö
            - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ —á–µ—Ä–µ–∑ Excel
            - –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
            - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
"""

from aiogram                    import types
from src.utils                  import logger
from aiogram.types              import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.exceptions         import TelegramBadRequest
from aiogram.fsm.context        import FSMContext
from aiogram.utils.markdown     import hbold, hcode
from src.managers.manager_user  import User

from src.states import ManagerPanelStates


async def cmd_manager_handler(message: types.Message):
    logger.info(f"Received MANAGER command FROM {message.from_user.id}")
    try:
        manager_main_menu_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manager_menu_users")],
            [InlineKeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏",       callback_data="manager_menu_products")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é",              callback_data="manager_close_menu")],
        ])
        await message.answer(
            f"üõ† –ú–µ–Ω–µ–¥–∂–µ—Ä-–ø–∞–Ω–µ–ª—å\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!",
            reply_markup=manager_main_menu_kb
        )
        await message.delete()
    except Exception as e:
        logger.exception(f"ERROR in cmd_manager_handler FOR user_id={message.from_user.id}")
        await message.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)





"""
    manager_users_menu_callback_handler

    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback menu_logs –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
"""
async def manager_users_menu_callback_handler(callback: types.CallbackQuery):
    if callback.data == "manager_menu_users":
        logger.info(f"Get manager users menu command from {callback.from_user.id}")
    try:
        manager_users_menu_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë• –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",                   callback_data="manager_get_users")],
            [InlineKeyboardButton(text="üìã –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",      callback_data="manager_get_user")],
            [InlineKeyboardButton(text="üñãÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",      callback_data="manager_change_user")],
            [InlineKeyboardButton(text="üè∑Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞",  callback_data="manager_change_discount")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",                                           callback_data="manager_back")],
        ])
        await callback.message.edit_text("üõ† –ú–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:")
        await callback.message.edit_reply_markup(reply_markup=manager_users_menu_kb)
        await callback.answer()
    except Exception as e:
        logger.exception(f"ERROR in get_log_menu_callback_handler FOR user_id={callback.from_user.id}")
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)




"""
    manager_get_users_callback_handler

    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback menu_logs –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
"""
async def manager_get_users_callback_handler(callback: types.CallbackQuery):
    if callback.data == "manager_get_users":
        logger.info(f"Get from manager list users command from by {callback.from_user.id}")
        try:
            session = callback.bot.um.Session()
            users = session.query(User).all()

            user_lines = []
            for u in users:
                user_lines.append(
                    f"{hbold('–ò–ù–ù')}: {hcode(u.inn)}\n"
                    f"{hbold('–¢–∏–ø')}: {callback.bot.um.get_user_type_name(u.user_type)}\n"
                    f"{hbold('Telegram ID')}: {u.telegram_id or '‚ùå'}\n"
                    f"{hbold('–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')}: {'‚úÖ' if u.is_authenticated else '‚ùå'}\n"
                    f"-------------------------"
                )
            await callback.message.edit_text(
                text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n".join(user_lines),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manager_menu_users")]
                ])
            )
            await callback.answer()
        except Exception as e:
            logger.exception(f"ERROR in manager_get_users_callback_handler FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)




"""
    manager_get_user_callback_handler

    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback menu_logs –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
"""
async def manager_get_user_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "manager_get_user":
        logger.info(f"Manager get info user by {callback.from_user.id}")
        try:
            await callback.message.answer("üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ò–ù–ù –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await state.set_state(ManagerPanelStates.waiting_for_inn)
        except Exception as e:
            logger.exception(f"ERROR in manager_get_user FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def handle_inn_user(message: types.Message, state: FSMContext):
    try:
        user = message.bot.um.get_user_by_inn(message.text)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        info = (
            f"{hbold('–ò–ù–ù:')} {hcode(user.inn)}\n"
            f"{hbold('Telegram ID:')} {user.telegram_id or '‚Äî'}\n"
            f"{hbold('–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')} {user.user_type} ({message.bot.um.get_user_type_name(user.user_type)})\n"
            f"{hbold('–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:')} {'‚úÖ' if user.is_authenticated else '‚ùå'}"
        )
        await message.answer(info)
        await state.clear()
    except Exception as e:
        logger.exception(f"ERROR in handle_inn_user FOR user_id={message.from_user.id}")
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)











"""
    manager_change_user_callback_handler
    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback menu_logs –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
"""
async def manager_change_user_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "manager_change_user":
        logger.info(f"Manager change user by {callback.from_user.id}")
        try:
            manager_users_menu_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üõ†Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –¢–ò–ü –∫–ª–∏–µ–Ω—Ç–∞", callback_data="manager_change_type_user")],
                [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –ò–ù–ù –∫–ª–∏–µ–Ω—Ç–∞", callback_data="manager_change_inn_user")],
                [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã", callback_data="manager_delete_user")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manager_menu_users")],
            ])
            await callback.message.edit_text("üõ† –ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            await callback.message.edit_reply_markup(reply_markup=manager_users_menu_kb)
            await callback.answer()
        except Exception as e:
            logger.exception(f"ERROR in manager_change_user_callback_handler FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)



"""
    manager_change_type_user_callback_handler
    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback menu_logs –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
"""
async def manager_change_type_user_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "manager_change_type_user":
        logger.info(f"Manager change type user by {callback.from_user.id}")
        try:
            await callback.message.answer("üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ò–ù–ù –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞!")
            await state.set_state(ManagerPanelStates.waiting_for_type)
        except Exception as e:
            logger.exception(f"ERROR in manager_change_type_user_callback_handler FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


async def manager_change_type_handler(message: types.Message):
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è: <–ò–ù–ù> <—Ç–∏–ø (2-4)>")
        return
    inn = parts[0]
    try:
        new_type = int(parts[1])

        if new_type not in (2, 3, 4):
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º 2, 3 –∏–ª–∏ 4.")
        return
    success = message.bot.um.change_user_type(inn, new_type)
    if success:
        await message.answer(f"‚úÖ –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ò–ù–ù {hbold(inn)} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_type}.")
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω.")









"""
    manager_change_discount_callback_handler
    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback menu_logs –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
"""
async def manager_change_discount_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "manager_change_discount":
        logger.info(f"Manager change type user by {callback.from_user.id}")
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞
            manager_discount_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="2Ô∏è‚É£ –ö–ª–∏–µ–Ω—Ç (–ë–∞–∑–æ–≤—ã–π)", callback_data="discount_2")],
                [InlineKeyboardButton(text="3Ô∏è‚É£ –ö–ª–∏–µ–Ω—Ç (–°—Ä–µ–¥–Ω–∏–π)", callback_data="discount_3")],
                [InlineKeyboardButton(text="4Ô∏è‚É£ –ö–ª–∏–µ–Ω—Ç (VIP)",     callback_data="discount_4")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",            callback_data="manager_menu_users")],
            ])
            await callback.message.edit_text("üõ† –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏:")
            await callback.message.edit_reply_markup(reply_markup=manager_discount_kb)
            await state.set_state(ManagerPanelStates.waiting_for_type_discount)
            await callback.answer()
        except Exception as e:
            logger.exception(f"ERROR in manager_change_discount_callback_handler FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def manager_wait_user_type_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    if callback.data.startswith("discount_"):
        logger.info(f"Manager change type user by {callback.from_user.id}")
        try:
            user_type = int(callback.data.split("_")[1])
            if user_type not in [2, 3, 4]:
                await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                return
            await state.update_data(
                user_type=user_type,
                discount_message_id=callback.message.message_id
            )
            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.15 –¥–ª—è 15%):")
            await state.set_state(ManagerPanelStates.waiting_for_new_discount)
        except Exception as e:
            logger.exception(f"ERROR in manager_change_discount_callback_handler FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def manager_wait_new_discount_callback_handler(message: types.Message, state: FSMContext):
    try:
        new_discount = float(message.text)
        if not (0 <= new_discount <= 1):
            raise ValueError("–°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 0 –¥–æ 1.")
        user_data = await state.get_data()
        user_type = user_data.get('user_type')
        if user_type is None:
            await message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
            return
        success = message.bot.um.set_discount(user_type, new_discount)
        if success:
            user_data = await state.get_data()
            message_id = user_data.get("discount_message_id")
            if message_id:
                try:
                    await message.bot.delete_message(
                        chat_id=message.chat.id,
                        message_id=message_id
                    )
                except TelegramBadRequest:
                    pass

            await message.answer(
                f"–°–∫–∏–¥–∫–∞ –¥–ª—è —Ç–∏–ø–∞ {message.bot.um.get_user_type_name(user_type)} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_discount * 100}%")
            await state.clear()
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫–∏–¥–∫–∏.")

    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")






"""
    manager_products_menu_callback_handler

    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback menu_logs –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
"""
async def manager_products_menu_callback_handler(callback: types.CallbackQuery):
    if callback.data == "manager_menu_products":
        logger.info(f"Get manager products menu command from {callback.from_user.id}")
    try:
        manager_products_menu_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞",       callback_data="manager_get_product")],
            [InlineKeyboardButton(text="üñãÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞",       callback_data="manager_change_product")],
            [InlineKeyboardButton(text="üìä –û–±–Ω–æ–≤–∏—Ç—å excel-price —Å —Ç–æ–≤–∞—Ä–∞–º–∏",            callback_data="manager_update_excel")],
            [InlineKeyboardButton(text="üîó –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π excel-price —Å–∏—Å—Ç–µ–º—ã",       callback_data="manager_download_excel")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",                                      callback_data="manager_back")],
        ])
        await callback.message.edit_text("üõ† –ú–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:")
        await callback.message.edit_reply_markup(reply_markup=manager_products_menu_kb)
        await callback.answer()
    except Exception as e:
        logger.exception(f"ERROR in get_log_menu_callback_handler FOR user_id={callback.from_user.id}")
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)



"""
    manager_update_excel_callback_handler

    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback download_logs –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–∞–º–∏
"""
async def manager_update_excel_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "manager_update_excel":
        logger.info(f"Update excel-price by {callback.from_user.id}")
        
        try:
            await callback.message.answer("üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π Excel-—Ñ–∞–π–ª (.xlsx) –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–π—Å–∞.")
            await state.set_state(ManagerPanelStates.waiting_for_file)
        except Exception as e:
            logger.exception(f"ERROR in manager_update_excel_callback_handler FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def handle_excel_file(message: types.Message, state: FSMContext):
    logger.info(f"Get excel-price by {message.from_user.id}")
    try:
        document = message.document
        if not document.file_name.endswith(".xlsx"):
            await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx")
            return
        file = await message.bot.get_file(document.file_id)
        file_path = file.file_path
        file_bytes = await message.bot.download_file(file_path)
        with open("data/excel/price-list.xlsx", "wb") as f:
            f.write(file_bytes.read())
        await message.reply("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ price-list.xlsx.")
        await state.clear()
    except Exception as e:
        logger.exception(f"ERROR in handle_excel_file FOR user_id={message.from_user.id}")
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)






"""
    manager_download_excel_callback_handler

    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback download_logs –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–∞–º–∏
"""
async def manager_download_excel_callback_handler(callback: types.CallbackQuery):
    if callback.data == "manager_download_excel":
        logger.info(f"Download excel-price by {callback.from_user.id}")
        try:
            await callback.message.answer_document(
                document=FSInputFile("data/excel/price-list.xlsx"),
                caption="üìä –í–æ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–∞–π—Å –ª–∏—Å—Ç —Å–∏—Å—Ç–µ–º—ã:"
            )
            await callback.answer()
        except Exception as e:
            logger.exception(f"ERROR in manager_download_excel_callback_handler FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)




"""
    manager_back_menu_callback_handler

    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback admin_back –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""
async def manager_back_menu_callback_handler(callback: types.CallbackQuery):
    if callback.data == "manager_back":
        logger.info(f"Back manager menu by {callback.from_user.id}")
        try:
            manager_main_menu_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",   callback_data="manager_menu_users")],
                [InlineKeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏",         callback_data="manager_menu_products")],
                [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é",                callback_data="manager_close_menu")],
            ])
            await callback.message.edit_text(f"üõ† –ú–µ–Ω–µ–¥–∂–µ—Ä-–ø–∞–Ω–µ–ª—å\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback.from_user.first_name}!")
            await callback.message.edit_reply_markup(reply_markup=manager_main_menu_kb)
            await callback.answer()
        except Exception as e:
            logger.exception(f"ERROR in admin_back_menu_callback_handler FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)



"""
    manager_close_menu_callback_handler

    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback admin_close –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""
async def manager_close_menu_callback_handler(callback: types.CallbackQuery):
    if callback.data == "manager_close_menu":
        logger.info(f"Close manager menu by {callback.from_user.id}")
        try:
            await callback.message.delete()
            await callback.answer()
        except Exception as e:
            logger.exception(f"ERROR in manager_close_menu_callback_handler FOR user_id={callback.from_user.id}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)