from aiogram import types
from aiogram.fsm.context import FSMContext
from src.states import AuthStates
from src.utils import logger

# –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ò–ù–ù –∏ –ø–∞—Ä–æ–ª—å
async def cmd_register(message: types.Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (12 —Ü–∏—Ñ—Ä):")
    await state.set_state(AuthStates.waiting_for_inn_register)
    # –°–æ—Ö—Ä–∞–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    await message.answer("–¢–∞–∫–∂–µ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –ò–ù–ù. –ü—Ä–∏–º–µ—Ä: 123456789012 mypass")

async def process_register_inn(message: types.Message, state: FSMContext):
    # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–ò–ù–ù> <–ø–∞—Ä–æ–ª—å>
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) != 2:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        return
    inn, password = parts
    if not inn.isdigit() or len(inn) != 12:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 12 —Ü–∏—Ñ—Ä.")
        return

    success = message.bot.user_manager.register_user(inn, password, message.from_user.id)

    if success:
        await message.answer("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–∞!")
        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ò–ù–ù {inn}")
    else:
        await message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ—Ç –ò–ù–ù —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    await state.clear()

# –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ò–ù–ù –∏ –ø–∞—Ä–æ–ª—å
async def cmd_login(message: types.Message, state: FSMContext):
    await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–ø—Ä–∏–º–µ—Ä: 123456789012 mypass):")
    await state.set_state(AuthStates.waiting_for_inn_login)

async def process_login_inn(message: types.Message, state: FSMContext):
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) != 2:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        return
    inn, password = parts
    if not inn.isdigit() or len(inn) != 12:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 12 —Ü–∏—Ñ—Ä.")
        return
    success = message.bot.user_manager.login_user(inn, password, message.from_user.id)
    if success:
        user = message.bot.user_manager.get_user_by_telegram(message.from_user.id)
        discount = message.bot.user_manager.get_discount(user.user_type) * 100
        await message.answer(
            f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n–í–∞—à —Ç–∏–ø: {user.user_type}\n–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: {discount}%"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è –ø–æ –ò–ù–ù {inn}")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ò–ù–ù –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /register.")
    await state.clear()
